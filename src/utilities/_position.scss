// Utilities - Position
// Enhanced version with modern features and better organization

@use 'sass:map';
@use '../base/variables' as *;
@use '../utilities/responsive' as *;

// =============================================
// Core Position Classes
// =============================================
.position-static {
	position: static !important;
}
.position-relative {
	position: relative !important;
}
.position-absolute {
	position: absolute !important;
}
.position-fixed {
	position: fixed !important;
}
.position-sticky {
	position: sticky !important;
}

// Responsive position classes
@each $breakpoint, $value in $hikma-breakpoints {
	@include media-up($breakpoint) {
		.#{$breakpoint}\:position-static {
			position: static !important;
		}
		.#{$breakpoint}\:position-relative {
			position: relative !important;
		}
		.#{$breakpoint}\:position-absolute {
			position: absolute !important;
		}
		.#{$breakpoint}\:position-fixed {
			position: fixed !important;
		}
		.#{$breakpoint}\:position-sticky {
			position: sticky !important;
		}
	}
}

// =============================================
// Offset Utilities
// =============================================
$position-offsets: (
	0: 0,
	25: 25%,
	50: 50%,
	75: 75%,
	100: 100%,
);

// Merge with spacing scale
$spacing-scale-for-position: (
	xs: var(--byte-spacing-xs),
	sm: var(--byte-spacing-sm),
	md: var(--byte-spacing-md),
	lg: var(--byte-spacing-lg),
	xl: var(--byte-spacing-xl),
	auto: auto,
);

$position-offsets: map.merge($position-offsets, $spacing-scale-for-position);

// Generate offset classes
@each $val-abbr, $val in $position-offsets {
	// Standard offsets
	.top-#{$val-abbr} {
		top: $val !important;
	}
	.bottom-#{$val-abbr} {
		bottom: $val !important;
	}
	.start-#{$val-abbr} {
		left: $val !important;
		inset-inline-start: $val !important; // Logical property
	}
	.end-#{$val-abbr} {
		right: $val !important;
		inset-inline-end: $val !important; // Logical property
	}

	// Negative offsets
	.-top-#{$val-abbr} {
		top: calc(#{$val} * -1) !important;
	}
	.-bottom-#{$val-abbr} {
		bottom: calc(#{$val} * -1) !important;
	}
	.-start-#{$val-abbr} {
		left: calc(#{$val} * -1) !important;
		inset-inline-start: calc(#{$val} * -1) !important;
	}
	.-end-#{$val-abbr} {
		right: calc(#{$val} * -1) !important;
		inset-inline-end: calc(#{$val} * -1) !important;
	}

	// Responsive offsets
	@each $breakpoint, $value in $hikma-breakpoints {
		@include media-up($breakpoint) {
			.#{$breakpoint}\:top-#{$val-abbr} {
				top: $val !important;
			}
			.#{$breakpoint}\:bottom-#{$val-abbr} {
				bottom: $val !important;
			}
			.#{$breakpoint}\:start-#{$val-abbr} {
				left: $val !important;
				inset-inline-start: $val !important;
			}
			.#{$breakpoint}\:end-#{$val-abbr} {
				right: $val !important;
				inset-inline-end: $val !important;
			}

			// Negative responsive offsets
			.#{$breakpoint}\:-top-#{$val-abbr} {
				top: calc(#{$val} * -1) !important;
			}
			.#{$breakpoint}\:-bottom-#{$val-abbr} {
				bottom: calc(#{$val} * -1) !important;
			}
			.#{$breakpoint}\:-start-#{$val-abbr} {
				left: calc(#{$val} * -1) !important;
				inset-inline-start: calc(#{$val} * -1) !important;
			}
			.#{$breakpoint}\:-end-#{$val-abbr} {
				right: calc(#{$val} * -1) !important;
				inset-inline-end: calc(#{$val} * -1) !important;
			}
		}
	}
}

// =============================================
// Special Positioning Utilities
// =============================================
// Edge positioning
.inset-0 {
	top: 0 !important;
	right: 0 !important;
	bottom: 0 !important;
	left: 0 !important;
}

.inset-x-0 {
	right: 0 !important;
	left: 0 !important;
}

.inset-y-0 {
	top: 0 !important;
	bottom: 0 !important;
}

// Centering utilities
.translate-middle {
	transform: translate(-50%, -50%) !important;
}

.translate-middle-x {
	transform: translateX(-50%) !important;
}

.translate-middle-y {
	transform: translateY(-50%) !important;
}

// Stacking context utilities
.z-auto {
	z-index: auto !important;
}
.z-0 {
	z-index: 0 !important;
}
.z-10 {
	z-index: 10 !important;
}
.z-20 {
	z-index: 20 !important;
}
.z-30 {
	z-index: 30 !important;
}
.z-40 {
	z-index: 40 !important;
}
.z-50 {
	z-index: 50 !important;
}

// Sticky positioning helpers
.sticky-top {
	position: sticky !important;
	top: 0 !important;
}
.sticky-bottom {
	position: sticky !important;
	bottom: 0 !important;
}
.sticky-start {
	position: sticky !important;
	left: 0 !important;
}
.sticky-end {
	position: sticky !important;
	right: 0 !important;
}

// =============================================
// Advanced Positioning Patterns
// =============================================
// Aspect ratio positioning container
.position-container {
	position: relative;
	width: 100%;
	height: 0;
	padding-bottom: 56.25%; // Default 16:9 aspect ratio

	& > * {
		position: absolute;
		top: 0;
		left: 0;
		width: 100%;
		height: 100%;
	}
}

// Full viewport positioning
.position-viewport {
	position: fixed;
	top: 0;
	left: 0;
	width: 100vw;
	height: 100vh;
	z-index: 1000;
}

// Position utilities for flex/grid children
.align-self-start {
	align-self: flex-start !important;
}
.align-self-center {
	align-self: center !important;
}
.align-self-end {
	align-self: flex-end !important;
}
.align-self-stretch {
	align-self: stretch !important;
}
