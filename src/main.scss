// Byte UI Framework - Main SCSS Entry Point
// Modern CSS framework with advanced features and accessibility

// 1. Core & Configuration
// Modern design system with design tokens and advanced CSS features
@use 'core/design-tokens';
@use 'core/variables';
@use 'core/mixins';
@use 'core/base'; // Base includes reset, html, body, and heading styles

// 2. Layout Modules
// Define the structural components of the page.
@use 'layout/container';
@use 'layout/grid';
@use 'layout/sections'; // Your custom section styles

// 3. Component Styles
// Specific UI components. They rely on variables and mixins from core.
@use 'components/button';
@use 'components/form'; // Add other components
@use 'components/card';
@use 'components/navbar';
@use 'components/breadcrumb';
@use 'components/pagination';
@use 'components/alert';
@use 'components/badge';
@use 'components/modal';
@use 'components/dropdown';
@use 'components/navs'; // (for Tabs/Pills)
@use 'components/carousel';
@use 'components/data-visualization';
@use 'components/spinner';
@use 'components/toast';

// 3.1 Advanced Components
@use 'components/advanced-forms/index' as advanced-forms;
@use 'components/interactive-components/index' as interactive-components;
@use 'components/layout-components/index' as layout-components;
@use 'components/modern-components/index' as modern-components;
@use 'components/utility-components/index' as utility-components;

// 3.2 Component Variants System
@use 'components/component-variants';

// 4. Utility Classes
// Single-purpose, reusable classes that often override component styles with `!important`.
// They should come after components to ensure they can override.
@use 'utilities/utilities'; // General utility styles
@use 'utilities/responsive'; // General responsive helpers
@use 'utilities/spacing';
@use 'utilities/flex';
@use 'utilities/text';
@use 'utilities/display';
@use 'utilities/sizing';
@use 'utilities/borders';
@use 'utilities/shadows';
@use 'utilities/position';
@use 'utilities/z-index';
@use 'utilities/opacity';
@use 'utilities/visibility';
@use 'utilities/float';
@use 'utilities/screen-readers';
@use 'utilities/interactions';
@use 'utilities/overflow';
@use 'utilities/align';
@use 'utilities/animations';
@use 'utilities/gradients';

// 4.1 Atomic Utility Classes (Modern Utility-First Approach)
// Comprehensive atomic utilities inspired by Tailwind CSS
@use 'utilities/atomic';

// 5. Modern CSS Features
// Container queries, cascade layers, view transitions, and other modern CSS features
@use 'modern/modern-css';

// 6. Accessibility
// WCAG 2.1 AA compliant styles and accessibility features
@use 'accessibility/accessibility';

// 7. Theme Styles / Overrides
// Specific themes (like dark mode) or any global overrides that change existing styles.
// These should generally be imported last to easily override previous styles.
@use 'theme/dark-mode';

// add custom styles here if needed, or create a separate file for project-specific styles
// @use 'custom-styles';
